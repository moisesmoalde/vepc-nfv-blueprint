tosca_definitions_version: cloudify_dsl_1_3

########################################################

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.10/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - app_blueprint.yaml
  - types/vepc_vm.yaml
  - types/vepc_nodes.yaml

inputs:

  aws_access_key_id:
    description: YOUR AWS ACCESS KEY ID

  aws_secret_access_key:
    description: YOUR AWS SECRET ACCESS KEY

  ec2_region_name:
    default: eu-west-1

  ec2_region_endpoint:
    default: ec2.eu-west-1.amazonaws.com

  availability_zone:
    default: eu-west-1a

  use_existing_keypair:
    default: false

  key_name:
    default: vepc-blueprint-key

  private_key_path:
    default: ~/.ssh/vepc-blueprint-key.pem

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: ami-a5f9f2c3 # Ubuntu Trusty hvm:ebs-ssd

  instance_type:
    description: >
      The AWS instance_type.
    default: t2.small # 1 vCPU core, 2 GiB RAM memory

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  vpc_id:
    type: string

  subnet_id:
    type: string

  subnet_cidr:
    type: string

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_input: aws_access_key_id }
      aws_secret_access_key: { get_input: aws_secret_access_key }
      ec2_region_name: { get_input: ec2_region_name }
      ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  all_nodes_external:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: all_nodes_external
      aws_config: *aws_config
      description: All vEPC Nodes External
      rules:
        - ip_protocol: icmp
          from_port: -1
          to_port: -1
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  all_nodes_internal:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: All vEPC Nodes Internal
      rules:
        - ip_protocol: tcp
          from_port: 0
          to_port: 65535
          cidr_ip: { get_input: subnet_cidr }
    relationships:
      - type: cloudify.relationships.depends_on
        target: all_nodes_external
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  hss_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: hss_vm_security_group
      aws_config: *aws_config
      description: HSS VM Security Group
      rules:
        - ip_protocol: 132
          cidr_ip: { get_input: subnet_cidr }
          from_port: 6000
          to_port: 6000
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  mme_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: mme_vm_security_group
      aws_config: *aws_config
      description: MME VM Security Group
      rules:
        - ip_protocol: 132
          cidr_ip: { get_input: subnet_cidr }
          from_port: 5000
          to_port: 5000
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  pgw_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: pgw_vm_security_group
      aws_config: *aws_config
      description: PGW VM Security Group
      rules:
        - ip_protocol: udp
          cidr_ip: { get_input: subnet_cidr }
          from_port: 8000
          to_port: 8000
        - ip_protocol: udp
          cidr_ip: { get_input: subnet_cidr }
          from_port: 8100
          to_port: 8100
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  sgw_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: sgw_vm_security_group
      aws_config: *aws_config
      description: SGW VM Security Group
      rules:
        - ip_protocol: udp
          cidr_ip: { get_input: subnet_cidr }
          from_port: 7000
          to_port: 7000
        - ip_protocol: udp
          cidr_ip: { get_input: subnet_cidr }
          from_port: 7100
          to_port: 7100
        - ip_protocol: udp
          cidr_ip: { get_input: subnet_cidr }
          from_port: 7200
          to_port: 7200
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  ran_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: ran_vm_security_group
      aws_config: *aws_config
      description: RAN VM Security Group
      rules:
        - ip_protocol: udp
          cidr_ip: { get_input: subnet_cidr }
          from_port: 4000
          to_port: 4000
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 22
          to_port: 22
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  sink_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: sink_vm_security_group
      aws_config: *aws_config
      description: SINK VM Security Group
      rules:
        - ip_protocol: udp
          cidr_ip: { get_input: subnet_cidr }
          from_port: 8500
          to_port: 8500
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 22
          to_port: 22
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

########################################################

  mme_lb_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  sgw_lb_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  pgw_lb_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      cidr_block: N/A

  key:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *aws_config
      use_external_resource: { get_input: use_existing_keypair }
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }

########################################################

  ran_vm:
    type: vepc.nodes.Server
    properties:
      aws_config: *aws_config
      instance_type: t2.large # 2 vCPU core, 8 GiB RAM memory
      name: RAN
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ran_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet

  sink_vm:
    type: vepc.nodes.Server
    properties:
      aws_config: *aws_config
      instance_type: t2.large # 2 vCPU core, 8 GiB RAM memory
      name: SINK
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sink_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet

  mme_lb_vm:
    type: vepc.nodes.Server
    properties:
      aws_config: *aws_config
      name: MME_LB
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: mme_lb_ip
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mme_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet

  mme_vm:
    type: vepc.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
      name: MME
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mme_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet

  sgw_lb_vm:
    type: vepc.nodes.Server
    properties:
      aws_config: *aws_config
      name: SGW_LB
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: sgw_lb_ip
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sgw_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet

  sgw_vm:
    type: vepc.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
      name: SGW
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sgw_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet

  pgw_lb_vm:
    type: vepc.nodes.Server
    properties:
      aws_config: *aws_config
      name: PGW_LB
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: pgw_lb_ip
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: pgw_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet

  pgw_vm:
    type: vepc.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
      name: PGW
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: pgw_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet

  hss_vm:
    type: vepc.nodes.Server
    properties:
      aws_config: *aws_config
      name: HSS
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: hss_vm_security_group
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet

########################################################

  ran:
    type: vepc.nodes.ran
    relationships:
      - type: cloudify.relationships.contained_in
        target: ran_vm

  sgw_lb:
    type: vepc.nodes.lb
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            virtual_ip: { get_attribute: [ sgw_lb_ip, aws_resource_id ] }
            network: { get_input: subnet_cidr }
        start:
          inputs:
            virtual_ip: { get_attribute: [ sgw_lb_ip, aws_resource_id ] }
            port1 : 7000
            port2 : 7100
            port3 : 7200
    relationships:
      - type: cloudify.relationships.contained_in
        target: sgw_lb_vm

  sgw:
    type: vepc.nodes.sgw
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            ip: { get_attribute: [ sgw_vm, ip ] }
            s11_threads: { get_input: s11_threads }
            s1_u_threads: { get_input: s1_u_threads }
            s5_threads: { get_input: s5_threads }
    relationships:
      - type: cloudify.relationships.contained_in
        target: sgw_vm
      - type: node_connected_to_load_balancer
        target: sgw_lb

  mme_lb:
    type: vepc.nodes.lb
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            virtual_ip: { get_attribute: [ mme_lb_ip, aws_resource_id ] }
            network: { get_input: subnet_cidr }
        start:
          inputs:
            virtual_ip: { get_attribute: [ mme_lb_ip, aws_resource_id ] }
            port1 : 5000
    relationships:
      - type: cloudify.relationships.contained_in
        target: mme_lb_vm

  mme:
    type: vepc.nodes.mme
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            ip: { get_attribute: [ mme_vm, ip ] }
            ran_ip: { get_attribute: [ ran_vm, ip ] }
            hss_ip: { get_attribute: [ hss_vm, ip ] }
            sgw_ip: { get_attribute: [ sgw_lb_ip, aws_resource_id ] }
            pgw_ip: { get_attribute: [ pgw_lb_ip, aws_resource_id ] }
            s1_mme_threads: { get_input: s1_mme_threads }
    relationships:
      - type: cloudify.relationships.contained_in
        target: mme_vm
      - type: node_connected_to_load_balancer
        target: mme_lb
      - type: cloudify.relationships.connected_to
        target: ran_vm
      - type: cloudify.relationships.connected_to
        target: hss_vm
      - type: cloudify.relationships.connected_to
        target: sgw_lb_vm
      - type: cloudify.relationships.connected_to
        target: pgw_lb_vm

  hss:
    type: vepc.nodes.hss
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            ip: { get_attribute: [ hss_vm, ip ] }
            s6a_threads: { get_input: s6a_threads }
    relationships:
      - type: cloudify.relationships.contained_in
        target: hss_vm

  pgw_lb:
    type: vepc.nodes.lb
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            virtual_ip: { get_attribute: [ pgw_lb_ip, aws_resource_id ] }
            network: { get_input: subnet_cidr }
        start:
          inputs:
            virtual_ip: { get_attribute: [ pgw_lb_ip, aws_resource_id ] }
            port1 : 8000
            port2 : 8100
    relationships:
      - type: cloudify.relationships.contained_in
        target: pgw_lb_vm

  pgw:
    type: vepc.nodes.pgw
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            ip: { get_attribute: [ pgw_vm, ip ] }
            sgw_ip: { get_attribute: [ sgw_lb_ip, aws_resource_id ] }
            sink_ip: { get_attribute: [ sink_vm, ip ] }
            s5_threads: { get_input: s5_threads }
            sgi_threads: { get_input: sgi_threads }
    relationships:
      - type: cloudify.relationships.contained_in
        target: pgw_vm
      - type: node_connected_to_load_balancer
        target: pgw_lb
      - type: cloudify.relationships.connected_to
        target: sgw_lb_vm
      - type: cloudify.relationships.connected_to
        target: sink_vm

  sink:
    type: vepc.nodes.sink
    relationships:
      - type: cloudify.relationships.contained_in
        target: sink_vm

########################################################

groups:
  mme_vm_group:
    members: [mme_vm]
    policies:
      up_scale_policy:
        type: cloudify.policies.types.threshold
        properties:
          service: cpu.total.user
          threshold: 25
          stability_time: 60
        triggers:
          scale_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                scalable_entity_name: mme
                delta: 1
                scale_compute: true
                max_instances: 5

      down_scale_policy:
        type: cloudify.policies.types.threshold
        properties:
          service: cpu.total.user
          threshold: 10
          upper_bound: false
          stability_time: 60
        triggers:
          scale_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                scalable_entity_name: mme
                scale_compute: true
                min_instances: 1
                delta: -1

  sgw_vm_group:
    members: [sgw_vm]
    policies:
      up_scale_policy:
        type: cloudify.policies.types.threshold
        properties:
          service: cpu.total.user
          threshold: 25
          stability_time: 60
        triggers:
          scale_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                scalable_entity_name: sgw
                delta: 1
                scale_compute: true
                max_instances: 5

      down_scale_policy:
        type: cloudify.policies.types.threshold
        properties:
          service: cpu.total.user
          threshold: 10
          upper_bound: false
          stability_time: 60
        triggers:
          scale_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                scalable_entity_name: sgw
                scale_compute: true
                min_instances: 1
                delta: -1

  pgw_vm_group:
    members: [pgw_vm]
    policies:
      up_scale_policy:
        type: cloudify.policies.types.threshold
        properties:
          service: cpu.total.user
          threshold: 25
          stability_time: 60
        triggers:
          scale_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                scalable_entity_name: pgw
                delta: 1
                scale_compute: true
                max_instances: 5

      down_scale_policy:
        type: cloudify.policies.types.threshold
        properties:
          service: cpu.total.user
          threshold: 10
          upper_bound: false
          stability_time: 60
        triggers:
          scale_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                scalable_entity_name: pgw
                scale_compute: true
                min_instances: 1
                delta: -1

########################################################

outputs:

  ran_access:
    description: private IP of RAN simulator node
    value:
      private_ip: { get_attribute: [ ran_vm, ip ] }

  sink_access:
    description: private IP of SINK node
    value:
      private_ip: { get_attribute: [ sink_vm, ip ] }

  mme_ip:
    description: virtual elastic IP of MME load balancer
    value:
      virtual_ip: { get_attribute: [ mme_lb_ip, aws_resource_id ] }

  pgw_ip:
    description: virtual elastic IP of PGW load balancer
    value:
      virtual_ip: { get_attribute: [ pgw_lb_ip, aws_resource_id ] }
