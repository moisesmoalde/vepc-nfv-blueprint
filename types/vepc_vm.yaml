
node_types:

  vepc.nodes.Server:
    derived_from: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        default:
          install_method: remote
          user: { get_input: agent_user }
          key: { get_input: private_key_path }
      image_id:
        default: { get_input: ami }
      instance_type:
        default: { get_input: instance_type }
      parameters:
        default:
          placement: { get_input: availability_zone }

  vepc.nodes.MonitoredServer:
    derived_from: vepc.nodes.Server
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              default:
                interval: 5
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}


relationships:
  node_connected_to_load_balancer:
    derived_from: cloudify.relationships.connected_to
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: scripts/lb/lb.py
          inputs:
            invocation:
              default:
                function: addBackend
                kwargs:
                  portList: { get_property: [ TARGET, ports ] }
        unlink:
          implementation: scripts/lb/lb.py
          inputs:
            invocation:
              default:
                function: removeBackend
                kwargs:
                  portList: { get_property: [ TARGET, ports ] }
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: scripts/lb/backend.py
